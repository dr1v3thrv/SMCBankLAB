/*Bank Lab Assignment
Nassar Castellon Paula Mercado Jimwell Castillo

This is a program that acts like a bank atm program of sorts//
Requires that the user be able to deposit, withdrawl and check balance*/

     #include <stdio.h>
     #include <stdlib.h>
     #include <errno.h>
     #include <stddef.h>
     #include <string.h>
     #include <stdbool.h>

     
     //Define
     #define CHUNK 1024 //Reads 1024 bytes of data at a time//
     #define NAME_LEN 50
	 #define ACCT_FILE_LEN 14 //ninedigit account num plus 4 characters for ".txt"
	 
     void printheader(void);
     void printintromenu(void);
     void printoutromenu(void);
     void casesystem(void);
     void casesystem(const char *accountFileName);
     void fileStructure(void);
        
		//These are the variables I am using currently. We can talk about changing them if need be

		int withdraw = 0;
    	int deposit = 0;
    	int i[30];
    	char t[30];
    	int balance = 0.0;//Checking Balance
    	int cSum = 0;//Checking Sum
    	int account;//Where the account number is saved
        int firstName = 1;// I was going to use this to somehow open specific files depending on the input of the user. Need more research since I have failed so far.
    	int lastName = 2;
		int gotostart=0;//This one of the things im testing currently. I need to be able to get out of a loop and start back in the main menu when the user is done. Figure this might be a way
    	char buff[CHUNK];//Array where the program stores the information of the file. Chunk is mentioned above
		char userChoice;
		int amount = 100;
		int c = 0;
		int transactionType = 3;
		
		size_t nread;
    	FILE *fptr;//This is our pointer to open file. Whenever you mention any file that need to be open just use fptr instead of file.

/* So right now I cannot get the system to work with the new filing system. So i reverted to the old file names for the meantime to finish up the remaining issues
with the file printing. math and stuff of that sort. The issue that i came accross when using the new filing system is that it exited out giving an error that it could not
find the file name. I created files for the accounting system and i do not know why it did not work. Like I said, i reverted some of the code back to the original so it runs
without errors for the most part. Paula, you probably understand the issue a bit better than i can at the moment. I added your new lines into the code. I tried to make it work
and so i moved on to continuing to make the rest of the code work. I figured the fileStructure function will be removed when we need to apply your stuff. Make the changes that you
see fit i guess. The printing stuff works so test it out before you make your changes and see what you think. Once you print into the receipt and the 10011.txt file to test out the
writing capabilities we have done so far, you get a better understanding what we have left. Going to work on my other tests i have to study for ~Nassar*/


typedef struct {

	char firstName[NAME_LEN +1];

	char lastName[NAME_LEN +1];

	int accountNum;

	int pin;

	char accountFile[ACCT_FILE_LEN +1];

} Account ;

    Account parseAccount(char* line);



    void printAccount() 

    {
	Account account;
	printf("\n***Account**");

	printf("\nFirst Name: %s", account.firstName);

    }



    bool getAccountAccess(char *fileNameBuffer, int bufferLength);

    int GetInteger(const char *prompt, int *i)//Sifts through inputs by user and ensures that it is an integer, otherwise it will return a invalid entry
	{
        int Invalid = 0;//This is how the loop keeps asking for a new entry as 0 is false then turns on to get another number
        int EndIndex;
        char buffer[100];//size of buffer
          
	    do
        {
	        if (Invalid)//loops for more re entries
                fputs("Invalid input, try again.\n", stdout);
                Invalid = 1;//makes statement true for another entry
                fputs(prompt, stdout);
            if (NULL == fgets(buffer, sizeof(buffer), stdin))
        
		    return 1;
            errno = 0;
        } 
        while ((1 != sscanf(buffer, "%d %n", i, &EndIndex)) || buffer[EndIndex] || errno);
        return 0;
    }
	
	int main (void)
    {
    	char accountFileName[ACCT_FILE_LEN + 1];//contains file name to use for access 
    	
		printheader();//This is the ASCII art command
		
		    getchar();//pauses the program to prevent the user from getting lost in menu
		
		printintromenu();//prints ascii top menu 
		
		bool continueAfterLogin = getAccountAccess(accountFileName, ACCT_FILE_LEN+1); 
	
	if (continueAfterLogin)
	{
		casesystem(accountFileName);//this is the case menu	
	}
 
		printoutromenu();//prints ascii bottom menu
        
		casesystem(accountFileName);//this is the case menu	
									
		return 0;
	
    }
    
	
    void casesystem(const char *accountFileName)
    {
    	Account account;
		getchar();
		c = 1;
		fileStructure();
		   while(1)
           {
			printf("\nPlease enter 'T' for Transaction History, 'B' for Balance, 'D' for Deposit, or 'W' for Withdraw\n 'P' to print a receipt, or 'E' to exit.\n");

			    scanf("%c", &userChoice);
			
			switch (userChoice)
			{
				case 't':
					{
						printf ("  Transaction Type    |         Amount        |    Balance    |\n");
                        balance = 0;
							for (c = 0; c <= 5; c++)
							{
							    printf ("%d - %18s|%23d|%15d|\n", c + 1, t[c] , i[c], balance = i[c] + balance);//%d - %19S|%14d|%15d|\n
						    }
							
							    printf ("Available funds : %d\n", balance);
			        	     
					        getchar();
            	        
					    	printf("Press enter to continue.\n");
            	            
							getchar();
            	                
								break;
            	    
                    }
			        
					case 'T':
					{
						printf ("  Transaction Type    |         Amount        |    Balance    |\n");
                        balance = 0;
							for (c = 0; c < 5; c++)
							{
							    printf ("%d - %18d|%23d|%15d|\n", c + 1, transactionType, i[c], balance = i[c] + balance);//%d - %19S|%14d|%15d|\n
						    }
							
							    printf ("Available funds : %d\n", balance);
			        	     
					        getchar();
            	        
					    	printf("Press enter to continue.\n");
            	            
							getchar();
            	                
								break;
                    }
			        case 'b':
			        	{
			        				printf ("Available funds : %d\n", balance);
            	                    
									getchar();
						            printf("Press enter to continue.\n");
						            
									     getchar();
            	                    
									         break;//prevents from the file looping over and over
			        	}
			        case 'B':
			        	{
			        				printf ("Available funds : %d\n", balance);
            	                    
									getchar();
						            printf("Press enter to continue.\n");
						            
									     getchar();
            	                    
									         break;//prevents from the file looping over and over
			        	}			        	
			        case 'd':
			        	{
			        	    printf("How much would you like to deposit today?\n");
			        	
						    printf("This is your current balance %d\n", balance);
			        	
						    scanf("%d", &deposit);
		    	        
						         cSum = balance + deposit;
						         i[c] = deposit;
						         //t[c] == 'deposit';//This is what i was working on to try to add the word deposit into the array using the counting system...so far didnt work
						         printf("%d\n", i[c]);
		    	        
						              printf("%d\n\n\n", cSum);
		    	        
						                   balance = cSum;
						                   c++;
            	        
						         getchar();
		    	        
						    printf("Press enter to continue.\n");
            	        
						         getchar();
		    	        
						             break;			        		
			        	}
			        case 'D':
			        	{
			        	    printf("How much would you like to deposit today?\n");
			        	
						    printf("This is your current balance %d\n", balance);
			        	
						    scanf("%d", &deposit);
		    	        
						         cSum = balance + deposit;
						         i[c] = deposit;
						         printf("%d\n", i[c]);
		    	        
						              printf("%d\n\n\n", cSum);
		    	        
						                   balance = cSum;
						                   c++;
            	        
						         getchar();
		    	        
						    printf("Press enter to continue.\n");
            	        
						         getchar();
		    	        
						             break;				        		
			        	}
			        	
			        case 'w':
			        	{
			        	    printf("How much would you like to withdraw today?\n");
		    	        
						    printf("%d\n", balance);
		    	        
						    scanf("%d", &withdraw);
		    	        
						         cSum = balance - withdraw;
						          i[c] = -withdraw;
						         printf("%d\n", i[c]);
		    	        
						             printf("%d\n\n\n", cSum);
		    	        
						                 balance = cSum;
						                 c++;
						        getchar();
		    	        
						    printf("Press enter to continue.\n");
            	        
						        getchar();
		    	        
						             break;

			        	}
			        case 'W':
			        	{
			        	    printf("How much would you like to withdraw today?\n");
		    	        
						    printf("%d\n", balance);
		    	        
						    scanf("%d", &withdraw);
		    	        
						         cSum = balance - withdraw;
						         i[c] = -withdraw;
						         printf("%d\n", i[c]);
		    	        
						             printf("%d\n\n\n", cSum);
		    	        
						                 balance = cSum;
						                 c++;
						        getchar();
		    	        
						    printf("Press enter to continue.\n");
            	        
						        getchar();
		    	        
						             break;

			        	}

			        case 'p':
			            {
			            	
			        	    fptr = fopen ("Receipt.txt", "w");
			        	    
							if(fptr==NULL)//gives error if the file is not found or created
                                {
            	                    printf("Account not found");
            	                
								exit(0);
                                }
                                
			        	    
							fprintf (fptr, "       LastName       |       FirstName       |     Account   |\n");
							
							fprintf (fptr, "%22s|%23s|%15d|\n\n\n\n", account.lastName, account.firstName , account.accountNum);//"%22S|%22S|%13S|\n"
							
							fprintf (fptr, "  Transaction Type    |         Amount        |    Balance    |\n");
								balance = 0;
							for (c = 0; c < 5; c++)
							{
							fprintf (fptr, "%d - %18s|%23d|%15d|\n", c + 1, t[c], i[c], balance = i[c] + balance);//%d - %19S|%14d|%15d|\n
						    }
							
							fprintf (fptr, "Available funds : %d\n", balance);
			        	     
							    getchar();
			        	    
							printf("Press enter to continue\n");
			        	    
							    getchar();
				                     break;
			            }

			        case 'P':
			            {
			        	    fptr = fopen ("Receipt.txt", "w");
			        	    
							if(fptr==NULL)//gives error if the file is not found or created
                                {
            	                    printf("Account not found");
            	                
								exit(0);
                                }
                                
			        	    
							fprintf (fptr, "       LastName       |       FirstName       |     Account   |\n");
							
							fprintf (fptr, "%22s|%23s|%15d|\n\n\n\n", account.lastName, account.firstName , account.accountNum);//"%22S|%22S|%13S|\n"
							
							fprintf (fptr, "  Transaction Type    |         Amount        |    Balance    |\n");
								balance = 0;
							for (c = 0; c < 5; c++)
							{
							fprintf (fptr, "%d - %18d|%23d|%15d|\n", c + 1, transactionType, i[c], balance = i[c] + balance);//%d - %19S|%14d|%15d|\n
						    }
							
							fprintf (fptr, "Available funds : %d\n", balance);
			        	     
							    getchar();
			        	    
							printf("Press enter to continue\n");
			        	    
							    getchar();
				                     break;
			            }
			        case 'e':
			        	{
			        		fptr = fopen ("10011.txt", "w");
			        		if(fptr==NULL)//gives error if the file is not found or created
                           {
                                 printf("Account not found");
            	                
				                 exit(0);
                           }
			        		balance = 
			        		fprintf (fptr, "%d %d %d %d %d", i[0] , i[1], i[2], i[3], i[4]), i[5];
			        		
			        		printintromenu();
			        		
			        		
							printf("||                Thank you for banking with Bank of the Angels. Have a nice day                 ||\n");
			        		
			        		printoutromenu();
			        		
							exit(1);
			        		
			        	}
			        case 'E':
			        	{
			        		fptr = fopen (accountFileName, "w");
			        		if(fptr==NULL)//gives error if the file is not found or created
                           {
                                 printf("Account not found");
            	                
				                 exit(0);
                           }
			        		fprintf (fptr, "%d %d %d %d %d", i[0] , i[1], i[2], i[3], i[4], i[5]);
			        		printintromenu();
			        		
			        		
							printf("||                Thank you for banking with Bank of the Angels. Have a nice day                 ||\n");
			        		
			        		printoutromenu();
			        		
							exit(1);
			        		
			        	}

	         }
	        }
	      }
    
     void fileStructure(void)// working on last thing which is the balance
    {
			fptr = fopen ("10011.txt", "r");//opens this file that contains the account information
			if(fptr==NULL)//gives error if the file is not found or created
           {
            	  printf("Account not found");
            	                
			      exit(0);
           }
            fscanf (fptr, "%20i %20i %20i %20i %40i", &i[0] , &i[1], &i[2], &i[3], &i[4], &i[5]);
            balance += i[0] + i[1]+ i[2]+ i[3]+ i[4] +i[5];
            i[0] =  balance;
		    fclose (fptr);
            
    }
    
     Account parseAccount(char* line) //Function parseAccount takes char ptr as its arg and returns an Account struct

    {

	const char delimiter[2] = ",";

	Account account; //variable account of the datatype Account 

	char* token = strtok(line, delimiter);// declares token as the first token in the line

	int i = 0;

	while (token != NULL)

	{

		if (i == 0)

		{

			strcpy(account.firstName, token);

		}

		if (i == 1)

		{

			strcpy(account.lastName, token);

		}

		if (i == 2)

		{

			account.accountNum = atoi(token);

		}

		if (i == 3)

		{

			account.pin = atoi(token);

		}

		if (i == 4)

		{

			strcpy(account.accountFile, token);

		}



		token = strtok(NULL, delimiter);

		i++;



	};

	return account; //returns account struct 

}



     bool getAccountAccess(char *fileNameBuffer, int bufferLength)

    {

	//variables 

	int accountNumInput = 0;

	int pinInput = 0;

	char line[500];
	
	Account account;
	
	bool pinMatches = false;





	printf("||                            Please enter your account number                                   ||\n||                                      ");  //Ask user for login info
	scanf("%d", &accountNumInput); //account num from user
	
	FILE *fpAccounts = fopen("accounts.txt", "r");	//open file



	if (fpAccounts == NULL)

	{

		printf("Error. No such file found");

	}

	else
	{
		while (fgets(line, 500, fpAccounts) != NULL)//get a line up to 500 chars from file. End when NULL
		{
			account = parseAccount(line);
			if (account.accountNum != accountNumInput)
			{
				printf("Sorry, that account number was did not match out records. Please try again.");
				pinMatches = false;
				break;
			}
			else
			{
				if (account.accountNum == accountNumInput)
				{
					printf("Please enter your PIN. ");
					scanf("%d", &pinInput);
					if (account.pin == pinInput)
					{
						pinMatches = true;
						strncpy(fileNameBuffer, account.accountFile, bufferLength);
						break;
					}
					else
					{
						while (account.pin != pinInput)
						{
							printf("Incorrect account PIN. Please try again. ");
							scanf("%d", &pinInput);
							if (account.pin == pinInput)
							{
								pinMatches = true;
								strncpy(fileNameBuffer, account.accountFile, bufferLength);
								break;
							}
						}
					}
				}
			}
			fclose(fpAccounts);
	}
	}
}


	void printheader(void)
    {
    	//Decided it would be cool to have ascii play as a menu. Check if you guys like it
    	//Also, I am testing this stuff out with the files named 10011.txt <- contains the checking and savings information
    	//The file 10011TH.txt <- contains the transaction history.
    	//still working on the rest. I have to figure out if the information on the arrays are usable to store the information as actual balance information.-Cast
		printf("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n");
    	printf("||                                                                                               ||\n");
    	printf("||                                                                                               ||\n");
    	printf("||       88888888b                         888                             .d888b.               ||\n");
    	printf("||       888   'Y88b                       888                            .d8''''8b.             ||\n");
    	printf("||       888     888                       888      .d8P'                 888    '88             ||\n");
    	printf("||       888     888                       888    .d8P'                   888    '88             ||\n");
    	printf("||       888  .d88P    99999b   1888888b.  888  .d8P'          .d888b.    888                    ||\n");
    	printf("||       888  'Y88b       '99b  888   888  888888P'           d88'''88b  8888888b                ||\n");
    	printf("||       888     888  .d799999  888   888  88888b.            888   888  '888''''                ||\n");
    	printf("||       888     888  99   '99  888   888  888 'Y8b.          888   888   888                    ||\n");
    	printf("||       888   .d88P  99    99  888   888  888    'Y8b.       Y88...88P   888                    ||\n");
    	printf("||       888888888P'  '9999999  888   '81  88'      'Y8b.      'Y888P'    888                    ||\n");
    	printf("||                                                                                               ||\n");
    	printf("||                                       888                                                     ||\n");
    	printf("||                               888     888                                                     ||\n");
        printf("||                            888888888  888          .d88b.                                     ||\n");
        printf("||                               888     888888b.    d8P  Y8b                                    ||\n");
        printf("||                               888     888  '888   88888888                                    ||\n");
        printf("||                               888     888   888   Y8b.                                        ||\n");
        printf("||                               888     888   888    'Y88888                                    ||\n");
        printf("||                                                                                               ||\n");
        printf("||                     .d8888                                   888                              ||\n");
        printf("||                    88' 888                                   888                              ||\n");
        printf("||                   88    88                                   888                              ||\n");
        printf("||                  88     88                                   888                              ||\n");
        printf("||                 88      88                                   888                              ||\n");
        printf("||                88       88                                   888                              ||\n");
        printf("||        .d7777777777777777777777777777777777777777777777777777888777777777777777777777,        ||\n");
        printf("||      .d77777777777777777777771888888n.77.d8888b.77.d88888b.7788877.d8888b777777777777'        ||\n");
        printf("||    .d7      88          88   888   888  888   88  88    88P  888  88K                         ||\n");
        printf("||  .d7       88           88   888   888  888   88  88888888P  888  'Y8888b,                    ||\n");
        printf("||  77b.     88            88   888   888  888   88  88         888       X88                    ||\n");
        printf("||   77b.   88             88   888   888  88888888  888888888  888  888888P'                    ||\n");
        printf("||    77b. 88                                 .d8888                                             ||\n");
        printf("||     77788                                .d88 88                                              ||\n");
        printf("||      88                                 .d8   88                                              ||\n");
        printf("||                                         88    88                                              ||\n");
        printf("||                                         8b.   88                                              ||\n");
        printf("||                                          8888888                                              ||\n");
    	printf("||                                                                                               ||\n");
    	printf("|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n");
    	printf("                                    Press Enter to Continue.\n");
    	printf("\n\n\n\n\n");
    	printf("                                   Welcome to Bank of the Angels\n");
    }
    void printintromenu(void)
    {
    	        printf("|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n");
				printf("||                                                                                               ||\n");
				printf("||                                                                                               ||\n");
				printf("||                                                                                               ||\n");
				printf("||                                                                                               ||\n");
    }
    void printoutromenu(void)
    {
    	        printf("||                                                                                               ||\n");
                printf("||                                                                                               ||\n");
                printf("||                                                                                               ||\n");
				printf("|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n");

		        printf("         We appreciate conducting business with you. How are we able to help you today?\n");			

    }           
